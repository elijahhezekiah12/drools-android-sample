import org.drools.core.common.DroolsObjectInputStream;
import org.kie.internal.KnowledgeBase;
import org.kie.internal.KnowledgeBaseFactory;
import org.kie.internal.definition.KnowledgePackage;
import org.kie.internal.runtime.StatefulKnowledgeSession;

import java.io.InputStream;
import java.util.Collection;



      Log.v(TAG, "Firing rules");
      DroolsAndroidContext.setContext(getActivity());
      try {
         InputStream iis = getResources().openRawResource(R.raw.measurements);
         DroolsObjectInputStream dois = new DroolsObjectInputStream(iis);
         final Collection<KnowledgePackage> pkgs = (Collection<KnowledgePackage>) dois.readObject();
         dois.close();

         Log.v(TAG, "Loaded rule packages: " + pkgs);
         for(KnowledgePackage pkg : pkgs) {
            Log.v(TAG, "Loading rule package: " + pkg.toString());
            for(Rule rule : pkg.getRules()) {
               Log.v(TAG, "Rule: " + rule);
            }
         }

         System.setProperty("java.version", "1.6");
         System.setProperty("mvel2.disable.jit", "true");
         OptimizerFactory.setDefaultOptimizer("reflective");

         final KnowledgeBase kbase = KnowledgeBaseFactory.newKnowledgeBase();
         kbase.addKnowledgePackages(pkgs);

         final StatefulKnowledgeSession ksession = kbase.newStatefulKnowledgeSession();
         ksession.insert(config);
         ksession.fireAllRules();

         ksession.dispose();
      } catch (Exception e) {
         Log.e(TAG, "Rule problem:", e);
      }